// Generated by CoffeeScript 1.10.0
(function() {
  angular.module('angularCloudmine', []).constant('cloudmine', require('cloudmine')).factory('AngularCloudmine', function($q) {
    var cmExports, method;
    this.ws = null;
    method = function(ws, method, params) {
      var deferred;
      deferred = $q.defer();
      console.log('ws:', ws);
      console.log('params:', params);
      ws[method].apply(this, params).on('success', function(data) {
        return deferred.resolve(data);
      }).on('result', function(result) {
        return deferred.resolve(result);
      }).on('error', function(err) {
        return deferred.reject(err);
      });
      return deferred.promise;
    };
    cmExports = {
      setWebService: function(ws) {
        return this.ws = ws;
      },
      api: function(action, options, data) {
        var deferred;
        deferred = $q.defer();
        if (!options) {
          options = this.ws.options;
        }
        this.ws.api(keys, options).on('success', function(data) {
          return deferred.resolve(data);
        }).on('error', function(err) {
          return deferred.reject(err);
        });
        return deferred.promise;
      },
      get: function(keys, options) {
        if (!options) {
          options = this.ws.options;
        }
        return method(this.ws, 'get', [keys, options]);
      },
      update: function(key, value, options) {
        var deferred;
        deferred = $q.defer();
        if (!options) {
          options = this.ws.options;
        }
        this.ws.update(key, value, options).on('success', function(data) {
          return deferred.resolve(data);
        }).on('error', function(err) {
          return deferred.reject(err);
        });
        return deferred.promise;
      },
      set: function(key, value, options) {
        var deferred;
        deferred = $q.defer();
        if (!options) {
          options = this.ws.options;
        }
        this.ws.set(key, value, options).on('success', function(data) {
          return deferred.resolve(data);
        }).on('error', function(err) {
          return deferred.reject(err);
        });
        return deferred.promise;
      },
      destroy: function(keys, options) {
        var deferred;
        deferred = $q.defer();
        if (!options) {
          options = this.ws.options;
        }
        this.ws.destroy(keys, options).on('success', function(data) {
          return deferred.resolve(data);
        }).on('error', function(err) {
          return deferred.reject(err);
        });
        return deferred.promise;
      },
      run: function(snippet, parameters, options) {
        var deferred;
        console.log('in run');
        deferred = $q.defer();
        if (!options) {
          options = this.ws.options;
        }
        this.ws.run(snippet, parameters, options).on('success', function(data) {
          console.log('run was successful', data);
          return deferred.resolve(data);
        }).on('error', function(err) {
          console.log('run failed?', err);
          return deferred.reject(err);
        }).on('result', function(result) {
          console.log('snippet result', result);
          return deferred.resolve(result);
        });
        return deferred.promise;
      },
      search: function(query, options) {
        var deferrd;
        deferrd = $q.defer();
        if (!options) {
          options = this.ws.options;
        }
        this.ws.search(query, options).on('success', function(data) {
          return deferred.resolve(data);
        }).on('error', function(err) {
          return deferred.reject(err);
        });
        return deferred.promise;
      },
      searchFiles: function(query, options) {
        var deferred;
        deferred = $q.defer();
        if (!options) {
          options = this.ws.options;
        }
        this.ws.searchFiles(query, options).on('success', function(data) {
          return deferred.resolve(data);
        }).on('error', function(err) {
          return deferred.reject(err);
        });
        return deferred.promise;
      },
      searchUsers: function(query, options) {
        var deferred;
        deferred = $q.defer();
        if (!options) {
          options = this.ws.options;
        }
        this.ws.searchUsers(query, options).on('success', function(data) {
          return deferred.resolve(data);
        }).on('error', function(err) {
          return deferred.reject(err);
        });
        return deferred.promise;
      },
      allUsers: function(options) {
        var deferred;
        deferred = $q.defer();
        if (!options) {
          options = this.ws.options;
        }
        this.ws.allUsers(options).on('success', function(data) {
          return deferred.resolve(data);
        }).on('error', function(err) {
          return deferred.reject(err);
        });
        return deferred.promise;
      },
      pushNotification: function(notification, options) {
        var deferred;
        deferred = $q.defer();
        if (!options) {
          options = this.ws.options;
        }
        this.ws.pushNotification(notification, options).on('success', function(data) {
          return deferred.resolve(data);
        }).on('error', function(err) {
          return deferred.reject(err);
        });
        return deferred.promise;
      },
      getUser: function(id, options) {
        var deferred;
        deferred = $q.defer();
        if (!options) {
          options = this.ws.options;
        }
        this.ws.getUser(id, options).on('success', function(data) {
          return deferred.resolve(data);
        }).on('error', function(err) {
          return deferred.reject(err);
        });
        return deferred.promise;
      },
      searchGeo: function(field, longitude, latitude, options) {
        if (!options) {
          options = this.ws.options;
        }
        return method(this.ws, 'searchGeo', [field, longitude, latitude, options]);
      },
      upload: function(key, file, options) {
        if (!options) {
          options = this.ws.options;
        }
        return method(this.ws, 'upload', [key, file, options]);
      },
      download: function(key, options) {
        if (!options) {
          options = this.ws.options;
        }
        return method(this.ws, 'download', [key, options]);
      },
      createUser: function(auth, password, options) {
        if (!options) {
          options = this.ws.options;
        }
        return method(this.ws, 'createUser', [auth, password, options]);
      },
      updateUser: function(field, value, options) {
        if (!options) {
          options = this.ws.options;
        }
        return method(this.ws, 'updateUser', [field, value, options]);
      },
      updateUserMaster: function(user_id, profile, options) {
        if (!options) {
          options = this.ws.options;
        }
        return method(this.ws, 'updateUserMaster', [user_id, profile, options]);
      },
      changePassword: function(auth, oldPassword, password, options) {
        if (!options) {
          options = this.ws.options;
        }
        return method(this.ws, 'changePassword', [auth, oldpassword, password, options]);
      },
      changeCredentials: function(auth, options) {
        if (!options) {
          options = this.ws.options;
        }
        return method(this.ws, 'changeCredentials', [auth, options]);
      },
      resetPassword: function(email, options) {
        if (!options) {
          options = this.ws.options;
        }
        return method(this.ws, 'resetPassword', [email, options]);
      },
      confirmReset: function(token, newPassword, options) {
        if (!options) {
          options = this.ws.options;
        }
        return method(this.ws, 'confirmReset', [token, newPassword, options]);
      },
      login: function(auth, password, options) {
        if (!options) {
          options = this.ws.options;
        }
        return method(this.ws, 'login', [auth, password, options]);
      },
      loginSocial: function(network, options) {
        if (!options) {
          options = this.ws.options;
        }
        return method(this.ws, 'loginSocial', [network, options]);
      },
      socialQuery: function(query, options) {
        if (!options) {
          options = this.ws.options;
        }
        return method(this.ws, 'socialQuery', [query, options]);
      },
      logout: function(options) {
        if (!options) {
          options = this.ws.options;
        }
        return method(this.ws, 'logout', [options]);
      },
      verify: function(auth, password, options) {
        if (!options) {
          options = this.ws.options;
        }
        return method(this.ws, 'verify', [auth, password, options]);
      },
      deleteUser: function(auth, password, options) {
        if (!options) {
          options = this.ws.options;
        }
        return method(this.ws, 'deleteUser', [auth, password, options]);
      },
      updateACL: function(acl, options) {
        if (!options) {
          options = this.ws.options;
        }
        return method(this.ws, 'updateACL', [acl, options]);
      },
      getACL: function(aclid, options) {
        if (!options) {
          options = this.ws.options;
        }
        return method(this.ws, 'getACL', [aclid, options]);
      }
    };
    return cmExports;
  });

}).call(this);
